{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","container/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","padding","children","App","onSearchChange","event","setState","searchfield","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAceA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,kBAAC,WAAD,KACC,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,cAAcC,IAAG,+BAA0BH,EAA1B,oBAC1B,4BAAKF,GACL,2BAAIC,MCgBQK,EApBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACjB,OACC,6BAEAA,EAAOC,KAAI,SAACC,EAAMC,GAClB,OACC,kBAAC,EAAD,CACAC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCENW,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACC,yBAAKV,UAAU,OACf,2BACAA,UAAU,gCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCGI,EARA,SAACC,GACf,OACC,yBAAKC,MAAO,CAAEC,SAAU,SAAUC,OAAQ,oBAAqBC,OAAQ,QAASC,QAAS,QACxFL,EAAMM,WCgDMC,G,wDA7Cd,aAAe,IAAD,8BACb,gBAeFC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAACC,YAAcF,EAAMG,OAAOC,SAfzC,EAAKC,MAAQ,CACbzB,OAAS,GACTsB,YAAc,IAJD,E,gEASM,IAAD,OACnBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACrB,OAAQ8B,S,+BAQ5B,IAAD,EACuBC,KAAKN,MAA5BzB,EADA,EACAA,OAAQsB,EADR,EACQA,YACVU,EAAiBhC,EAAOiC,QAAO,SAAAC,GACpC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASd,EAAYa,kBAGtD,OAAKnC,EAAOqC,OAIZ,yBAAKzC,UAAU,MACb,wBAAIA,UAAU,MAAd,gBACC,kBAAC,EAAD,CAAWU,aAAcyB,KAAKZ,iBAC/B,6BACA,kBAAC,EAAD,KACD,kBAACmB,EAAD,CAAUtC,OAASgC,OARZ,wBAAIpC,UAAU,cAAd,iB,GA5BQ2C,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.87f2da47.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\treturn(\r\n\t\t<Fragment>\r\n\t\t <div className='tc bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robofriends' src={`https://robohash.org/${id}? size=200x200`} />\r\n\t\t\t<h2>{name}</h2>\r\n\t\t\t<p>{email}</p>\r\n\t\t </div>\r\n\t\t</Fragment>\r\n\t\t);\r\n\t}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\n// import { robots } from './Robot';\r\nimport Card from '../component/Card';\r\n\r\nconst Cardlist = ({robots}) => { \r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t{\r\n\t\t\trobots.map((user, i) => {\r\n\t\t\treturn (\r\n\t\t\t\t<Card \r\n\t\t\t\tkey={i} \r\n\t\t\t\tid={robots[i].id} \r\n\t\t\t\tname={robots[i].name} \r\n\t\t\t\temail={robots[i].email} \r\n\t\t\t\t/>\r\n\t\t\t   );\r\n\t\t\t})\r\n\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n\r\n\r\nexport default Cardlist;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-light-blue'\r\n\t\ttype='search' \r\n\t\tplaceholder='search robots' \r\n\t\tonChange={searchChange} \r\n\t\t/>\r\n\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\nexport default SearchBox;\r\n\r\n","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflow: 'Scroll', border: '5px solid #24866E', height: '450px', padding: '2px' }} >\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\nimport Scroll from '../component/Scroll';\r\nimport '../container/App.css';\r\n\r\n\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\trobots : [],\r\n\t\tsearchfield : ''\r\n\t \t}\r\n\t}\r\n\r\n\r\ncomponentDidMount() {\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t.then(response => response.json())\r\n\t.then(users => this.setState({robots: users}));\r\n\t}\t\r\n\r\n\r\nonSearchChange = (event) => {\r\n\tthis.setState({searchfield : event.target.value});\r\n}\r\n\r\n\trender() {\r\n\t\tconst { robots, searchfield} = this.state;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n\t\t})\r\n\t\t// '!' means equals to 0 or opposite of robots.length\r\n\t\tif (!robots.length) {\r\n\t\t\treturn <h1 className='tc f1 pv6 '> Loading </h1>\r\n\t\t} else {\r\n\t\t\treturn (\r\n\t\t<div className='tc'>\r\n\t\t \t<h1 className='f2'>RobotFriends</h1>\r\n\t\t \t\t<SearchBox searchChange={this.onSearchChange} />\r\n\t\t \t<div>\r\n\t\t \t<Scroll>\r\n\t\t\t<CardList robots ={filteredRobots} />\r\n\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t)\r\n\t\t}\r\n \r\n}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App';\n// import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}